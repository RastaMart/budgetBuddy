import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Get the directory name of the current module
const __dirname = path.dirname(fileURLToPath(import.meta.url));
const packageJsonPath = path.join(__dirname, '..', 'package.json');

// Read the package.json file
const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
const currentVersion = packageJson.version;

// Parse the current version
const [major, minor, patch] = currentVersion.split('.').map(Number);

// Determine which part to increment based on command line argument
// Default to patch if no argument is provided
const bumpType = process.argv[2] || 'patch';

let newVersion;
switch (bumpType) {
  case 'major':
    newVersion = `${major + 1}.0.0`;
    break;
  case 'minor':
    newVersion = `${major}.${minor + 1}.0`;
    break;
  case 'patch':
  default:
    newVersion = `${major}.${minor}.${patch + 1}`;
    break;
}

// Update the version in package.json
packageJson.version = newVersion;

// Write the updated package.json
fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2) + '\n');

console.log(`Version bumped from ${currentVersion} to ${newVersion}`);

// Create or update a version.ts file to expose the version to the app
const versionFilePath = path.join(__dirname, '..', 'src', 'version.ts');
fs.writeFileSync(
  versionFilePath,
  `// This file is automatically generated. Do not edit directly.\nexport const VERSION = '${newVersion}';\nexport const BUILD_DATE = '${new Date().toISOString()}';\n`
);

console.log(`Version information updated in src/version.ts`);
